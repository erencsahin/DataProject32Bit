services:
  # ────────── ZOOKEEPER ──────────
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: toyota_zk
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc -w 2 localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  # ────────── KAFKA ──────────
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: toyota_kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: toyota_zk:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure

  # ────────── KAFKA TOPIC CREATOR ──────────
  kafka-setup:
    image: confluentinc/cp-kafka:7.0.1
    container_name: toyota_kafka_setup
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c '
        echo "Waiting for Kafka to be ready..."
      
        # Kafka ile bağlantı kurmayı dene, hazır olana kadar bekle
        until kafka-topics --bootstrap-server kafka:9093 --list > /dev/null 2>&1; do
          echo "Kafka is not ready yet, retrying in 5 seconds..."
          sleep 5
        done
      
        echo "Kafka is ready! Creating topics..."
      
        # avg-data topic''ini oluştur
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic avg-data --partitions 1 --replication-factor 1
      
        echo "Topics created successfully!"
        kafka-topics --bootstrap-server kafka:9093 --list
      
        echo "Topic details:"
        kafka-topics --bootstrap-server kafka:9093 --describe --topic avg-data
      '
    restart: "no"

  # ────────── REDIS ──────────
  redis:
    image: redis:7-alpine
    container_name: toyota_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  # ────────── POSTGRES ──────────
  postgres:
    image: postgres:16
    container_name: toyota_postgres
    environment:
      POSTGRES_DB: toyotadb
      POSTGRES_USER: toyota
      POSTGRES_PASSWORD: secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U toyota -d toyotadb || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  # ────────── PGADMIN ──────────
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: toyota_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: on-failure

  # ────────── OPENSEARCH ──────────
  opensearch:
    image: opensearchproject/opensearch:2.8.0
    container_name: toyota_opensearch
    environment:
      - discovery.type=single-node
      - DISABLE_SECURITY_PLUGIN=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure

  # ────────── OPENSEARCH DASHBOARDS ──────────
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.8.0
    container_name: toyota_opensearch_dash
    environment:
      - OPENSEARCH_HOSTS=http://opensearch:9200
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    depends_on:
      opensearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601 || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 20s
    restart: on-failure

  # ────────── REST SIMULATOR ──────────
  rest:
    build:
      context: .
      dockerfile: rest/Dockerfile
    container_name: toyota_rest
    depends_on:
      - redis
    ports:
      - "8082:8082"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./logs/rest:/var/log/rest
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure

  # ────────── TCP SIMULATOR ──────────
  tcp:
    build:
      context: .
      dockerfile: tcp/Dockerfile
    container_name: toyota_tcp
    depends_on:
      - redis
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./logs/tcp:/var/log/tcp
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8081 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure

  # ────────── COORDINATOR ──────────
  coordinator:
    build:
      context: .
      dockerfile: coordinator/Dockerfile
    container_name: toyota_coordinator
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    ports:
      - "1502:1502"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_URL=jdbc:postgresql://postgres:5432/toyotadb
      - POSTGRES_USER=toyota
      - POSTGRES_PASSWORD=secret
      - OPENSEARCH_HOST=opensearch
      - OPENSEARCH_PORT=9200
    volumes:
      - ./logs/coordinator:/var/log/coordinator
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:1502/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure

  # ────────── OPENSEARCH CONSUMER ──────────
  kafka-consumer-opensearch:
    build:
      context: .
      dockerfile: kafka-consumer-opensearch/Dockerfile
    container_name: toyota_consumer_os
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
      opensearch:
        condition: service_healthy
    environment:
      # Kafka Ayarları
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_KAFKA_CONSUMER_GROUP_ID: os-consumers
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      SPRING_KAFKA_CONSUMER_ENABLE_AUTO_COMMIT: false
      SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.springframework.kafka.support.serializer.JsonDeserializer
      SPRING_KAFKA_LISTENER_ACK_MODE: manual_immediate

      # OpenSearch Ayarları
      OPENSEARCH_HOST: opensearch
      OPENSEARCH_PORT: 9200

      # Logging
      LOGGING_LEVEL_ORG_APACHE_KAFKA: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA: DEBUG

      # Topic
      KAFKA_TOPIC_AVG_DATA: avg-data
    volumes:
      - ./logs/kafka-consumer-opensearch:/var/log/kafka-consumer-opensearch
    healthcheck:
      test: [ "CMD-SHELL", "ps aux | grep -v grep | grep java || exit 1" ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: on-failure


  # ────────── PG CONSUMER ──────────
  kafka-consumer-postgresql:
    build:
      context: .
      dockerfile: kafka-consumer-postgresql/Dockerfile
    container_name: toyota_consumer_pg
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      # Kafka ayarları - INTERNAL listener kullan
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_KAFKA_CONSUMER_GROUP_ID: pg-consumers
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      SPRING_KAFKA_CONSUMER_ENABLE_AUTO_COMMIT: false
      SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_LISTENER_ACK_MODE: manual_immediate

      # Database ayarları
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/toyotadb
      SPRING_DATASOURCE_USERNAME: toyota
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

      # JPA ayarları
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect

      # Logging
      LOGGING_LEVEL_ORG_APACHE_KAFKA: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA: DEBUG

      # Topic ayarları
      KAFKA_TOPIC_AVG_DATA: avg-data
    volumes:
      - ./logs/kafka-consumer-postgresql:/var/log/kafka-consumer-postgresql
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || ps aux | grep -v grep | grep java || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: on-failure

  logstash:
    image: opensearchproject/logstash-oss-with-opensearch-output-plugin:7.13.4
    container_name: toyota_logstash
    restart: on-failure
    volumes:
      - ./filebeat/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"      # Beats input
    networks:
      - default
    # Logstash 7.12+ Monitoring API 9600 portunu açabilirsiniz (opsiyonel)
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9600/?pretty || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  filebeat:
    image: docker.elastic.co/beats/filebeat-oss:7.12.1
    container_name: toyota_filebeat
    user: root
    command:
      - filebeat
      - -e
      - --strict.perms=false
      - -c
      - /usr/share/filebeat/filebeat.yml
      - -v
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - ./logs:/var/log:rw
      - filebeat_data:/usr/share/filebeat/data:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
    depends_on:
      logstash:
        condition: service_started
      coordinator:
        condition: service_started
      rest:
        condition: service_started
      tcp:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "filebeat test config -c /usr/share/filebeat/filebeat.yml || exit 1" ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    networks:
      - default
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M


volumes:
  postgres_data:
  opensearch_data:
  filebeat_data: